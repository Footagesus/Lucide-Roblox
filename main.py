import os
import re
import cairosvg
from PIL import Image, ImageOps

# Configuration
sprite_size = 1024 ## The roblox has a limit
                   ## of 1024x 1024 sizes
icon_size = 96 ## To change the size, 
               ## you need to clear the dist folder
debug_mode = True

svg_folder = "./icons"
png_folder = "./dist"
output_folder = "./spritesheets"
lua_metadata_path = f"./spritesheets/icons-{icon_size}.lua"

os.makedirs(png_folder, exist_ok=True)
os.makedirs(output_folder, exist_ok=True)

def convert_svg_to_png(svg_folder, png_folder, size=96):
    for file_name in os.listdir(svg_folder):
        if file_name.endswith(".svg"):
            svg_path = os.path.join(svg_folder, file_name)
            png_path = os.path.join(png_folder, os.path.splitext(file_name)[0] + ".png")
            if not os.path.exists(png_path):
                try:
                    cairosvg.svg2png(url=svg_path, write_to=png_path, output_width=size, output_height=size)
                    if debug_mode:
                        print(f"[DEBUG] Converted {file_name} to {png_path}")
                except Exception as e:
                    print(f"[ERROR] Failed to convert {file_name}: {e}")

def clean_icon_name(file_name):
    return re.sub(r"\.trashed-\d+-", "", os.path.splitext(file_name)[0])

def invert_image_colors(image):
    if image.mode == "RGBA":
        r, g, b, a = image.split()
        rgb = Image.merge("RGB", (r, g, b))
        inverted_rgb = ImageOps.invert(rgb)
        return Image.merge("RGBA", (*inverted_rgb.split(), a))
    return ImageOps.invert(image)

def create_spritesheets(png_folder, sprite_size=1024, icon_size=96, debug=False):
    metadata = {}
    current_page = Image.new("RGBA", (sprite_size, sprite_size))
    x_offset, y_offset = 0, 0
    current_page_index = 1

    for file_name in sorted(os.listdir(png_folder)):
        if file_name.endswith(".png"):
            icon_name = clean_icon_name(file_name)
            png_path = os.path.join(png_folder, file_name)
            try:
                icon_img = Image.open(png_path)
                icon_img = invert_image_colors(icon_img)
                if x_offset + icon_size > sprite_size:
                    x_offset = 0
                    y_offset += icon_size
                if y_offset + icon_size > sprite_size:
                    page_path = os.path.join(output_folder, f"spritesheet-{current_page_index}.png")
                    current_page.save(page_path)
                    if debug:
                        print(f"[DEBUG] Saved spritesheet-{current_page_index}.png")
                    current_page = Image.new("RGBA", (sprite_size, sprite_size))
                    x_offset, y_offset = 0, 0
                    current_page_index += 1
                current_page.paste(icon_img, (x_offset, y_offset))
                metadata[icon_name] = {
                    "ImageRectPosition": (x_offset, y_offset),
                    "_Size": (icon_size, icon_size),
                    "Image": current_page_index
                }
                x_offset += icon_size
                if debug:
                    print(f"[DEBUG] Added icon {icon_name} at ({x_offset}, {y_offset})")
            except Exception as e:
                if debug:
                    print(f"[ERROR] Failed to process {file_name}: {e}")

    if x_offset > 0 or y_offset > 0:
        page_path = os.path.join(output_folder, f"spritesheet-{current_page_index}.png")
        current_page.save(page_path)
        if debug:
            print(f"[DEBUG] Saved spritesheet-{current_page_index}.png")

    return metadata

def save_metadata_to_lua(metadata, lua_metadata_path):
    with open(lua_metadata_path, "w") as lua_file:
        lua_file.write(
            '-- Generated by "Lucide-Roblox" (Github: Footagesus) https://github.com/Footagesus/Lucide-Roblox\n\n'
        )
        lua_file.write("return {\n")
        for name, data in metadata.items():
            lua_file.write(f'    ["{name}"] = {{\n')
            lua_file.write(f'        ImageRectPosition = Vector2.new({data["ImageRectPosition"][0]}, {data["ImageRectPosition"][1]}),\n')
            lua_file.write(f'        ImageRectSize = Vector2.new({data["_Size"][0]}, {data["_Size"][1]}),\n')
            lua_file.write(f'        Image = {data["Image"]},\n')
            lua_file.write("    },\n")
        lua_file.write("}")
    if debug_mode:
        print(f"[DEBUG] Metadata saved to {lua_metadata_path}")

if __name__ == "__main__":
    convert_svg_to_png(svg_folder, png_folder, size=icon_size)
    metadata = create_spritesheets(png_folder, sprite_size=sprite_size, icon_size=icon_size, debug=debug_mode)
    save_metadata_to_lua(metadata, lua_metadata_path)